--[[
Arena module related for patching totaliz and campaign arena
Author: m-bo-one
--]]

-- imports
local print_dbg = mbo_arena_utils.print_dbg
local inventory_auto_equip_for_arena = mbo_arena_utils.inventory_auto_equip_for_arena
local force_actor_to_be = mbo_arena_utils.force_actor_to_be
local update_non_grata_info = mbo_arena_storage.update_non_grata_info


-- !!!!!!!!!!!
-- TOTALIZATOR
-- Overriding arena totalizator for spectator items drop off in the box and enabling auto equip (mostly only binocle here)
local function teleport_for_totaliz(first_speaker, second_speaker)
    local box = get_story_object("bar_arena_inventory_box")
    if (box) then
        local function transfer_object_item(item)
            db.actor:transfer_item(item, box)
        end
        db.actor:inventory_for_each(transfer_object_item)
        level.add_pp_effector("fade_in.ppe", 200, false)
        db.actor:set_actor_position(vector():set(139.61517333984, -13.390427589417, 100.86038208008), 37564, 1710)
    end
    if has_alife_info("totaliz_money_has_gone") then
        alife_create_item("wpn_binoc", db.actor)

        inventory_auto_equip_for_arena()
    end
end

-- Overriding arena totalizator on exit to make it pluggable to keep on/off items in the arena inventory box
local function teleport_for_totaliz_out(first_speaker, second_speaker)
    local box = get_story_object("bar_arena_inventory_box_2")
    if (box) then
        local function transfer_object_item(item)
            db.actor:transfer_item(item, box)
        end
        db.actor:inventory_for_each(transfer_object_item)
    end

    xr_zones.purge_arena_items("bar_arena")

    level.add_pp_effector("fade_in.ppe", 200, false)
    db.actor:set_actor_position(vector():set(150.249435424805, 0.429966986179352, 72.1354370117188), 40238, 1684)
end

-- !!!!!!!!
-- CAMPAIGN

-- Overriding arena baseline on enter
local function bar_arena_teleport(actor, npc)
    actor_effects.disable_effects_timer(100)

    -- hide_hud_inventory()
    hide_hud_all()

    local box = get_story_object("bar_arena_inventory_box")
    if (box) then
        local function transfer_object_item(item)
            db.actor:transfer_item(item, box)
        end
        db.actor:inventory_for_each(transfer_object_item)
    end

    -- always a loner in the arena
    force_actor_to_be("stalker")

    local spawn_items = {}

    if has_alife_info("bar_arena_fight_1") then
        table.insert(spawn_items, "wpn_knife")

        table.insert(spawn_items, "wpn_pm")
        table.insert(spawn_items, "ammo_9x18_pmm")

        table.insert(spawn_items, "helm_cloth_mask")
        table.insert(spawn_items, "novice_outfit")
    elseif has_alife_info("bar_arena_fight_2") then
        table.insert(spawn_items, "wpn_knife")

        table.insert(spawn_items, "wpn_mp5")
        table.insert(spawn_items, "ammo_9x19_fmj")
        table.insert(spawn_items, "ammo_9x19_fmj")

        table.insert(spawn_items, "helm_cloth_mask")
        table.insert(spawn_items, "novice_outfit")
    elseif has_alife_info("bar_arena_fight_3") then
        table.insert(spawn_items, "wpn_knife")

        table.insert(spawn_items, "wpn_bm16")
        table.insert(spawn_items, "ammo_12x70_buck")

        table.insert(spawn_items, "helm_cloth_mask")
        table.insert(spawn_items, "novice_outfit")
    elseif has_alife_info("bar_arena_fight_4") then
        table.insert(spawn_items, "wpn_knife")

        table.insert(spawn_items, "wpn_ak74m_n")
        table.insert(spawn_items, "ammo_5.45x39_fmj")
        table.insert(spawn_items, "ammo_5.45x39_fmj")

        table.insert(spawn_items, "helm_respirator_old")
        table.insert(spawn_items, "stalker_outfit")

        table.insert(spawn_items, "bandage")
        table.insert(spawn_items, "bandage")
    elseif has_alife_info("bar_arena_fight_5") then
        table.insert(spawn_items, "wpn_knife")

        table.insert(spawn_items, "wpn_abakan_n")
        table.insert(spawn_items, "ammo_5.45x39_ap")
        table.insert(spawn_items, "ammo_5.45x39_ap")

        table.insert(spawn_items, "helm_resp")
        table.insert(spawn_items, "svoboda_light_outfit")

        table.insert(spawn_items, "medkit")
        table.insert(spawn_items, "bandage")
    elseif has_alife_info("bar_arena_fight_6") then
        table.insert(spawn_items, "wpn_knife")

        table.insert(spawn_items, "wpn_groza")
        table.insert(spawn_items, "ammo_9x39_ap")
        table.insert(spawn_items, "ammo_9x39_ap")

        table.insert(spawn_items, "grenade_f1")

        table.insert(spawn_items, "helm_tactic")
        table.insert(spawn_items, "specops_outfit")

        table.insert(spawn_items, "medkit_army")
    elseif has_alife_info("bar_arena_fight_7") then
        table.insert(spawn_items, "wpn_axe")

        table.insert(spawn_items, "grenade_f1")
        table.insert(spawn_items, "grenade_f1")

        table.insert(spawn_items, "helm_cloth_mask")
        table.insert(spawn_items, "greh_trenchcoat_outfit")

        table.insert(spawn_items, "bandage")
    elseif has_alife_info("bar_arena_fight_8") then
        table.insert(spawn_items, "wpn_knife")

        table.insert(spawn_items, "wpn_g36")
        table.insert(spawn_items, "ammo_5.56x45_ap")
        table.insert(spawn_items, "ammo_5.56x45_ap")

        table.insert(spawn_items, "helm_exo")
        table.insert(spawn_items, "exo_outfit")

        table.insert(spawn_items, "batteries_exo")
    end

    for k, v in pairs(spawn_items) do
        local se = alife_create(v, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), AC_ID)
        se_save_var(se.id, se:name(), "unpatched", true)
    end

    inventory_auto_equip_for_arena()
end

-- Overriding arena baseline on exit
local function bar_arena_teleport_2(actor, npc)
    actor_effects.disable_effects_timer(100)
    -- hide_hud_inventory()
    hide_hud_all()

    -- remove items from actor given to him by arena
    local box = get_story_object("bar_arena_inventory_box_2")
    if (box) then
        local function transfer_object_item(item)
            db.actor:transfer_item(item, box)
        end
        db.actor:inventory_for_each(transfer_object_item)
    end

    -- purge all marked items
    xr_zones.purge_arena_items("bar_arena")

    level.add_pp_effector("blink.ppe", 234, false)

    db.actor:set_actor_position(patrol("t_walk_2"):point(0))
    local dir = patrol("t_look_2"):point(0):sub(patrol("t_walk_2"):point(0))
    db.actor:set_actor_direction(-dir:getH())

    -- return back disguise
    force_actor_to_be(gameplay_disguise.get_default_comm())

    -- TODO: As this function local, somehow I want to heal actor
    -- healing with superior kit after battle
    -- zzz_player_injuries.actor_on_item_use(nil, "survival_kit")
end

-- looks like this function only used for .ltx setup bar and mlr/arena only
-- TODO: How to make it work with mutants?
local function make_enemy(actor, npc, p)
    local npc1 = get_story_object(p[1])
    if not (npc1) then
        return
    end
    local npc2 = get_story_object(p[2])
    if not (npc2) then
        return
    end

    -- monsters do not have relations
    if not IsMonster(npc1) then
        local comm = npc1:character_community()

        -- just in case of something like dynamic relations, etc
        -- as we are a stalker, so rest is an enemy
        if comm ~= "stalker" and not has_alife_info("totaliz_money_has_gone") then
            print_dbg("Actor as enemy set")
            npc1:set_relation(game_object.enemy, db.actor)
        end

        npc1:set_relation(game_object.enemy, npc2)
    end

    -- print_dbg(
    --     "npc | id: %s | clsid: %s | name: %s | section: %s | is monster?: %s | " ..
    --     "enemy: %s | relation: %s",
    --     npc1:id(), npc1:clsid(), npc1:name(), npc1:section(), npc1:is_monster(),
    --     npc1:get_enemy(), npc1:relation(npc2)
    -- )
end

local function take_totaliz_1(first_speaker, second_speaker)
    local amount = 1000
	dialogs.relocate_money_from_actor(first_speaker, second_speaker, amount)
    update_non_grata_info(-amount)
end

local function take_totaliz_2(first_speaker, second_speaker)
    local amount = 2500
    print_dbg("take_totaliz_2: %s", amount)
	dialogs.relocate_money_from_actor(first_speaker, second_speaker, amount)
    update_non_grata_info(-amount)
end

local function take_totaliz_5(first_speaker, second_speaker)
    local amount = 5000
	dialogs.relocate_money_from_actor(first_speaker, second_speaker, amount)
    update_non_grata_info(-amount)
end

local function total_reward_1000(actor, npc, p)
    local amount = math.random(2000, 4000)
	dialogs.relocate_money(db.actor, amount,"in")
    update_non_grata_info(amount)
end

local function total_reward_2500(actor, npc, p)
    local amount = math.random(3500, 6000)
	dialogs.relocate_money(db.actor, amount,"in")
    update_non_grata_info(amount)
end

local function total_reward_5000(actor, npc, p)
    local amount = math.random(7000, 15000)
	dialogs.relocate_money(db.actor, amount, "in")
    update_non_grata_info(amount)
end

-- !!!!!!!!!!!!!!
-- monkeypatching

-- dialogs_mlr.script
dialogs_mlr.teleport_for_totaliz = teleport_for_totaliz
dialogs_mlr.take_totaliz_1 = take_totaliz_1
dialogs_mlr.take_totaliz_2 = take_totaliz_2
dialogs_mlr.take_totaliz_5 = take_totaliz_5
dialogs_mlr.total_reward_1000 = total_reward_1000
dialogs_mlr.total_reward_2500 = total_reward_2500
dialogs_mlr.total_reward_5000 = total_reward_5000

-- xr_effects.script
xr_effects.bar_arena_teleport = bar_arena_teleport
xr_effects.bar_arena_teleport_2 = bar_arena_teleport_2
xr_effects.teleport_for_totaliz_out = teleport_for_totaliz_out
xr_effects.make_enemy = make_enemy
