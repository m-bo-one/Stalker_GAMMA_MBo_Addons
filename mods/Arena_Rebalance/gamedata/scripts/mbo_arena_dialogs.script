--[[
Arena module for dialogs
Author: m-bo-one
--]]

-- imports
local print_dbg = mbo_arena_utils.print_dbg

-- for caching only
local condlist_finality_for_dialogs = {}
local fights_for_dialogs = {}

function update_dialogs_cache()
    print_dbg("Updating dialogs cache")
    local dialogs_data = modxml_mbo_arena_adata.get_mbo_arena_dialogs_data()

    local dialogs_set = {}
    local fights_set = {}

    for category, fights in pairs(dialogs_data.fights) do
        if dialogs_data:fights_len(category) == 0 then
            goto continue
        end
        for fight, fight_data in pairs(fights) do
            local fight_list = str_explode(fight, ":")

            local count_1 = fight_data.count_1
            local count_2 = fight_data.count_2

            local npc_name_1 = fight_list[1]
            local npc_name_2 = fight_list[2]
            dialogs_set["mbo_arena_total_" .. npc_name_1] = true
            dialogs_set["mbo_arena_total_" .. npc_name_2] = true

            fights_for_dialogs[
                "mbo_arena_total_fight_" ..npc_name_1.. "_" ..count_1.. "_vs_" ..npc_name_2 .. "_" .. count_2
            ] = true
        end

        ::continue::
    end

    for key, _ in pairs(fights_set) do
        table.insert(fights_for_dialogs, key)
    end

    for key, _ in pairs(dialogs_set) do
        table.insert(condlist_finality_for_dialogs, key)
    end
end

-- !!!!!!!!!!!
-- TOTALIZATOR
-- Overriding arena totalizator for spectator items drop off in the box and enabling auto equip (mostly only binocle here)
function teleport_for_totaliz(first_speaker, second_speaker)
    if not has_alife_info("mbo_arena_totaliz_money_has_gone") then
        return
    end

    local box = get_story_object("bar_arena_inventory_box")
    if (box) then
        local function transfer_object_item(item)
            db.actor:transfer_item(item, box)
        end
        db.actor:inventory_for_each(transfer_object_item)
        level.add_pp_effector("fade_in.ppe", 200, false)
        db.actor:set_actor_position(vector():set(139.61517333984, -13.390427589417, 100.86038208008), 37564, 1710)
    end

    alife_create_item("wpn_binoc", db.actor)

    mbo_arena_utils.inventory_auto_equip_for_arena()

    mbo_arena_utils.make_actor_unkillable()
end

local function add_bet_to_storage(amount)
    local bet_name = mbo_arena_dialogs.get_totaliz_current_bet()
    if bet_name == nil then
        print_dbg("Bet not found for reward, ignore")
        return
    end

    mbo_arena_storage.update_active_bet({
        name = bet_name,
        amount = amount,
    })
end

function take_totaliz_1(first_speaker, second_speaker)
    local amount = 1000
	dialogs.relocate_money_from_actor(first_speaker, second_speaker, amount)
    mbo_arena_storage.update_non_grata_info(-amount)

    add_bet_to_storage(amount)
end

function take_totaliz_2(first_speaker, second_speaker)
    local amount = 2500
	dialogs.relocate_money_from_actor(first_speaker, second_speaker, amount)
    mbo_arena_storage.update_non_grata_info(-amount)

    add_bet_to_storage(amount)
end

function take_totaliz_5(first_speaker, second_speaker)
    local amount = 5000
	dialogs.relocate_money_from_actor(first_speaker, second_speaker, amount)
    mbo_arena_storage.update_non_grata_info(-amount)

    add_bet_to_storage(amount)
end


-- Checked for non grata, if passed, kick actor and play some sound
function totaliz_non_grata()
    return mbo_arena_storage.actor_is_non_grata()
end

function totaliz_not_non_grata()
    return not mbo_arena_storage.actor_is_non_grata()
end

-- kicking player to face if he is speaking bad
function blow_to_face(actor, npc)
    local current_godwill = npc:goodwill(actor)
    print_dbg("blow to face, current goodwill: %s", current_godwill)
    npc:force_set_goodwill(-5000, actor)

    CreateTimeEvent("mbo_arena", "blow_to_face", 1, function()
        -- return previous godwill, so npc could make a hit
        npc:force_set_goodwill(current_godwill, actor)

        print_dbg("reset back goodwill, he has calmed down: %s", current_godwill)

        RemoveTimeEvent("mbo_arena", "blow_to_face")
    end)
end

-- totaliz unified for lost
function get_totaliz_party_name(condlist, suffix)
    for _, cond in ipairs(condlist) do
        if has_alife_info(cond .. '_' .. suffix) then
            return str_explode(cond, "_")[4]
        end
    end
    return nil
end

-- should be invoked during totaliz action
function get_totaliz_current_bet()
    return get_totaliz_party_name(condlist_finality_for_dialogs, 'bet')
end

function get_totaliz_current_win()
    return get_totaliz_party_name(condlist_finality_for_dialogs, 'done')
end

function totaliz_bet_exist()
    return get_totaliz_current_bet() ~= nil
end

function totaliz_bet_lost()
    local bet_name = get_totaliz_current_win()
    if bet_name == nil then
        print_dbg("Bet name from alife info not found for bet lost, setting as false")
        return false
    end

    local active_bet = mbo_arena_storage.get_active_bet()
    if active_bet == nil then
        print_dbg("Active bet from storage not found for bet lost, setting as false")
        return false
    end

    return bet_name ~= active_bet.name
end

function totaliz_bet_win()
    local bet_name = get_totaliz_current_win()
    if bet_name == nil then
        print_dbg("Bet name from alife info not found for bet lost, setting as false")
        return false
    end

    local active_bet = mbo_arena_storage.get_active_bet()
    if active_bet == nil then
        print_dbg("Active bet from storage not found for bet lost, setting as false")
        return false
    end

    return bet_name == active_bet.name
end

function total_clear_info()
    for _, cond in ipairs(condlist_finality_for_dialogs) do
        local conditions_to_remove = {"done", "bet"}
        for _, suffix_to_remove in ipairs(conditions_to_remove) do
            local info = cond .. '_' .. suffix_to_remove
            if has_alife_info(info) then
                db.actor:disable_info_portion(info)
            end
        end
    end
    -- reset active bet
    mbo_arena_storage.update_active_bet(nil)
end

local coef_min_multi = 0.4 -- currently as in Arni description, later - dynamic coeff
local coef_max_multi = 3 -- currently as in Arni description, later - dynamic coeff

function total_dynamic_reward()
    local active_bet = mbo_arena_storage.get_active_bet()
    if active_bet == nil then
        print_dbg("Active bet from storage not found for reward, ignore")
        return
    end

    local cond = 'mbo_arena_totaliz_money_has_gone_' .. tostring(active_bet.amount)
    if has_alife_info(cond) then
        local reward = math.random(
            math.floor(active_bet.amount * (1 + coef_min_multi)),
            math.floor(active_bet.amount * (1 + coef_max_multi))
        )
        dialogs.relocate_money(db.actor, reward,"in")
        mbo_arena_storage.update_non_grata_info(reward)
    end

    -- reset active bet
    mbo_arena_storage.update_active_bet(nil)
end

function actor_on_first_update()
    -- refreshing dialogs list for better performance
    update_dialogs_cache()
end

function on_game_start()
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
end
